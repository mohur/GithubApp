{"version":3,"sources":["components/MyPieChart.js","components/Avatar.js","components/GithubApp.js","App.js","index.js"],"names":["MyPieChart","languages","userfullname","title","width","height","chartType","loader","data","options","Avatar","imgSrc","this","props","src","className","Image","alt","roundedCircle","Component","GithubApp","useState","username","setUsername","setLanguages","fetching","setFetching","errormsg","setErrormsg","setUserfullname","avatarsrc","setAvatarsrc","followers","setFollowers","following","setFollowing","myHeaders","Headers","authHeader","btoa","process","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","append","requestOptions","method","headers","redirect","fetchUser","a","fetch","resp","json","user","name","avatar_url","fetchUserdetails","userRepositories","length","languageMap","Map","forEach","repo","language","has","set","get","l","push","value","key","type","placeholder","onChange","event","target","Button","variant","color","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7eeaecf.chunk.js","sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\n\nconst MyPieChart = ({languages, userfullname}) => {\n\n    const title = `${userfullname}'s preferred Languages`;\n\n    return(\n        <div>\n\n            <Chart\n                width={'600px'}\n                height={'400px'}\n                chartType=\"PieChart\"\n                loader={<div>Loading Chart</div>}\n                data={languages}\n                options={{\n                    title: title,\n                }}\n            />\n\n        </div>\n    );\n}\n\nexport default MyPieChart;","import React, { Component } from 'react';\nimport './Avatar.scss';\nimport Image from 'react-bootstrap/Image';\n\nclass Avatar extends Component {\n\n    render() {\n\n        const imgSrc = this.props.src;\n\n        return(\n            <div className=\"avatarContainer\">\n                <Image alt=\"userImage\" src={imgSrc} roundedCircle />\n            </div>\n        )\n    }\n}\n\nexport default Avatar;\n","import React, { useState } from 'react';\nimport './GithubApp.scss';\nimport MyPieChart from './MyPieChart';\nimport Button from '@material-ui/core/Button';\nimport Avatar from './Avatar';\n\nconst GithubApp = () => {\n    const [username, setUsername] = useState(\"\");\n    const [languages, setLanguages] = useState([]);\n    const [fetching, setFetching] = useState(false);\n    const [errormsg, setErrormsg] = useState(\"\");\n    const [userfullname, setUserfullname] = useState(\"\");\n    const [avatarsrc, setAvatarsrc] = useState(\"\");\n    const [followers, setFollowers] = useState(0);\n    const [following, setFollowing] = useState(0);\n\n    const myHeaders = new Headers();\n    const authHeader = \"Basic \" + btoa(process.env.REACT_APP_GITHUB_CLIENT_ID + \":\" + process.env.REACT_APP_GITHUB_CLIENT_SECRET);\n    myHeaders.append(\"Authorization\", authHeader);\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    const handleChange = (event) => {\n        setUsername(event.target.value);\n    }\n\n    const fetchUser = async () => {\n        setFetching(true);\n        const resp = await fetch(`https://api.github.com/users/${username}`, requestOptions);\n        const user = await resp.json();\n        if(user) { \n            setUserfullname(user.name);\n            setAvatarsrc(user.avatar_url);\n            setFollowers(user.followers);\n            setFollowing(user.following);\n        } else {\n            setErrormsg(\"Not a valid user\");\n        }\n\n        fetchUserdetails();\n        setFetching(false);\n    }\n\n    const fetchUserdetails = async () => {\n        setFetching(true);\n        const resp = await fetch(`https://api.github.com/users/${username}/repos`, requestOptions);\n        const userRepositories = await resp.json();\n        if(userRepositories && userRepositories.length > 0) {\n            const languageMap = new Map();\n            userRepositories.forEach((repo) => {\n                if(repo.language) {\n                    if(languageMap.has(repo.language)) {\n                        languageMap.set(repo.language, languageMap.get(repo.language)+1);\n                    } else {\n                        languageMap.set(repo.language, 1);\n                    }\n                }\n            });\n            setLanguages([]);\n            const l = [];\n            l.push([\"Languages\", \"Count\"]);\n            languageMap.forEach((value, key) => {\n                l.push([key, value]);\n                \n            });\n            setLanguages(languages => l);\n        } else {\n            setErrormsg(\"Not a valid user\");\n        }\n        setFetching(false);\n    }\n\n    return (\n        <div className=\"container\">\n            <h3>What language does User code in?</h3>\n            <p>(based on user's contributions to public Github repositories)</p>\n            <input \n                type=\"text\"\n                placeholder=\"Enter User's Github username\"\n                value={username}\n                onChange={handleChange}\n            />\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={fetchUser}\n            >\n                Fetch\n            </Button>\n            <div>\n                {errormsg}\n            </div>\n            <div>\n                {languages.length > 0 && !fetching\n                    &&\n                    <div>\n                        <div>\n                            {\n                                avatarsrc &&\n                                <Avatar src={avatarsrc} />\n                            }\n                            {\n                                userfullname &&\n                                <span><br/>{userfullname}</span>\n                            }\n                            {\n                                followers &&\n                                <p>Followers: {followers}</p>\n                            }\n                            {\n                                following &&\n                                <p>Following {following}</p>\n                            }\n                        </div>\n                        <MyPieChart languages={languages} userfullname={userfullname} />\n                    </div>    \n                }\n            </div>\n            \n        </div>\n    )\n};\n\nexport default GithubApp;\n","import React from 'react';\nimport './App.css';\nimport GithubApp from './components/GithubApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GithubApp />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}